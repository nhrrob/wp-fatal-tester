#!/usr/bin/env php
<?php

// Use Composer's autoloader path if available (when run via Composer proxy)
if (isset($GLOBALS['_composer_autoload_path'])) {
    require $GLOBALS['_composer_autoload_path'];
} else {
    // Handle both direct execution and symlink execution
    $scriptPath = $_SERVER['SCRIPT_FILENAME'] ?? __FILE__;
    $scriptDir = dirname($scriptPath);

    $autoloaderPaths = [
        $scriptDir . '/vendor/autoload.php', // When running from package root
        dirname($scriptDir) . '/autoload.php', // When running from vendor/bin
        dirname($scriptDir, 2) . '/autoload.php', // When running from vendor/bin (alternative)
        $scriptDir . '/../autoload.php', // Alternative path
    ];

    $autoloaderFound = false;
    foreach ($autoloaderPaths as $autoloaderPath) {
        if (file_exists($autoloaderPath)) {
            require $autoloaderPath;
            $autoloaderFound = true;
            break;
        }
    }

    if (!$autoloaderFound) {
        echo "Error: Could not find Composer autoloader. Please run 'composer install' first.\n";
        echo "Searched paths:\n";
        foreach ($autoloaderPaths as $path) {
            echo "  - $path\n";
        }
        exit(1);
    }
}

use NHRROB\WPFatalTester\FatalTester;
use NHRROB\WPFatalTester\CLI\ArgumentParser;

// Parse command-line arguments
$parser = new ArgumentParser();
$options = $parser->parse($argv);

// Show help if requested
if ($options['help']) {
    echo $parser->getHelpText();
    exit(0);
}

// Create tester with appropriate settings
$useColors = !$options['no_colors'];
$tester = new FatalTester($options['severity_filter'], $useColors);

// Run the test
$tester->run($options);
